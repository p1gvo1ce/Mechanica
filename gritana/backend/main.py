import aiosqlite
import datetime
import asyncio
import time
from fastapi import FastAPI, Query
from typing import List, Optional
from pathlib import Path
import re
import datetime

app = FastAPI()

# –ü—É—Ç—å –Ω–µ —Ç–æ—Ç, —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å ‚Äî –ø—É—Ç—å —Ç–æ—Ç, —á—Ç–æ –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è.
CURRENT_DIR = Path(__file__).parent
PROJECT_ROOT = CURRENT_DIR.parent.parent

DB_PATH = PROJECT_ROOT / "logs" / "logs.db"

def parse_dsl(dsl_string: str):
    """
    –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É-–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –≤ SQL-–∑–∞–ø—Ä–æ—Å, –ø–æ–Ω—è—Ç–Ω—ã–π –º–∞—à–∏–Ω–µ.

    üïØ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ–±—Ä—è–¥—ã:
        - AND / OR / NOT ‚Äî –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∫–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ü–µ–ø–µ–π –ø—Ä–æ–∫–ª—è—Ç–∏–π
        - level, module, message, timestamp ‚Äî –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–æ–ª—è –≤—ã–∑–æ–≤–∞
        - message ‚Äî –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∏–±–æ —Ç–µ–∫—Å—Ç ‚Äî —ç—Ç–æ —Ç–µ–Ω—å —Å–º—ã—Å–ª–∞
        - timestamp ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞–∫–∏: >, <, >=, <=, –∏–±–æ –≤—Ä–µ–º—è ‚Äî –Ω–µ –ª–∏–Ω–µ–π–Ω–æ, –Ω–æ –ø–æ–¥–¥–∞—ë—Ç—Å—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—é

    üìú –ü—Ä–∏–º–µ—Ä—ã DSL-–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π:
        level:ERROR AND message:"fail.*int"
        NOT module:ai/logic.py AND timestamp:>2025-04-01T00:00:00

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - where_clause (str) ‚Äî —á–∞—Å—Ç—å SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±—Ä—è–¥–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        - params (list) ‚Äî –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏, –¥–∞–±—ã –Ω–µ —Ç—Ä–µ–≤–æ–∂–∏—Ç—å –±–æ–≥–æ–≤ –∏–Ω—ä–µ–∫—Ü–∏—è–º–∏

    –í–Ω–∏–º–∞–Ω–∏–µ:
        - –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏. –î–µ–º–æ–Ω—ã –ø–æ–∫–∞ –±–æ—è—Ç—Å—è –≥–ª—É–±–æ–∫–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏.
        - –û—à–∏–±–æ—á–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è. –¢–∞–∫–æ–≤ –Ω–∞—à –ø—É—Ç—å.
    """

    dsl_string = dsl_string.replace("&&", "AND")
    dsl_string = dsl_string.replace("||", "OR")

    tokens = re.split(r'\s+(AND|OR|NOT)\s+', dsl_string.strip())
    sql_parts = []
    params = []
    message_regex = None

    for token in tokens:
        token = token.strip()
        if token in {"AND", "OR", "NOT"}:
            sql_parts.append(token)
            continue

        match = re.match(r'(\w+):([<>]=?|=)?(.*)', token)
        if not match:
            continue

        field, op, value = match.groups()
        field = field.strip()
        op = op.strip() if op else '='
        value = value.strip().strip('"')

        if field == "timestamp":
            try:
                dt = datetime.datetime.fromisoformat(value)
                timestamp = int(dt.timestamp() * 1000)
                sql_parts.append(f"timestamp {op} ?")
                params.append(timestamp)
            except ValueError:
                continue

        elif field == "message":
            # –ú—ã –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º message –≤ SQL, –∞ –ø–µ—Ä–µ–¥–∞—ë–º –µ–≥–æ –∫–∞–∫ regex
            message_regex = value
            continue

        elif field in {"level", "module"}:
            sql_parts.append(f"{field} {op} ?")
            params.append(value)

    where_clause = " ".join(sql_parts)
    return where_clause, params, message_regex




@app.get("/logs")
async def get_logs(
        level: Optional[str] = None,
        module: Optional[str] = None,
        limit: int = 100
):
    print("‚Üí –ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞", time.time())
    query = "SELECT * FROM logs WHERE 1=1"
    params = []

    if level:
        query += " AND level = ?"
        params.append(level)

    if module:
        query += " AND module = ?"
        params.append(module)

    query += " ORDER BY timestamp DESC LIMIT ?"
    params.append(limit)

    print("‚Üí –ü–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î", time.time())
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        print("‚Üí –ü–æ–¥–∫–ª—é—á—ë–Ω. –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å...", time.time())
        cursor = await db.execute(query, params)
        logs = await cursor.fetchall()
        print("‚Üí –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à—ë–Ω", time.time())

    return [dict(row) for row in logs]

@app.get("/levels")
async def get_levels():
    return ["DEBUG", "INFO", "WARN", "ERROR", "CRITICAL"]

@app.get("/modules")
async def get_modules():
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        curor = await db.execute("SELECT DISTINCT module FROM logs ORDER BY module")
        rows = await curor.fetchall()
        return [row["module"] for row in rows]

@app.get("/stats")
async def get_stats():
    query = """
    SELECT
        strftime('%Y-%m-%d %H:00', timestamp / 1000, 'unixepoch') as hour,
        COUNT(*) as count
    FROM logs
    GROUP BY hour
    ORDER BY hour DESC
    LIMIT 100
    """
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute(query)
        rows = await cursor.fetchall()
        return [dict(row) for row in rows]

@app.get("/logs/dsl")
async def get_logs_dsl(q: str):
    where_clause, params, message_regex = parse_dsl(q)

    query = "SELECT * FROM logs"
    if where_clause:
        query += f" WHERE {where_clause}"
    query += " ORDER BY timestamp DESC LIMIT 100"

    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute(query, params)
        rows = await cursor.fetchall()

    # –ï—Å–ª–∏ –µ—Å—Ç—å message_regex, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º
    if message_regex is not None:
        pattern = re.compile(message_regex)
        filtered = [dict(r) for r in rows if pattern.search(r["message"] or "")]
        return filtered
    else:
        return [dict(r) for r in rows]
