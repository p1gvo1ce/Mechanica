import re
import datetime


def parse_dsl(dsl_string: str):
    """
    –ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É-–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –≤ SQL-–∑–∞–ø—Ä–æ—Å, –ø–æ–Ω—è—Ç–Ω—ã–π –º–∞—à–∏–Ω–µ.

    üïØ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ–±—Ä—è–¥—ã:
        - AND / OR / NOT ‚Äî –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∫–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Ü–µ–ø–µ–π –ø—Ä–æ–∫–ª—è—Ç–∏–π
        - level, module, message, timestamp ‚Äî –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–æ–ª—è –≤—ã–∑–æ–≤–∞
        - message ‚Äî –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∏–±–æ —Ç–µ–∫—Å—Ç ‚Äî —ç—Ç–æ —Ç–µ–Ω—å —Å–º—ã—Å–ª–∞
        - timestamp ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞–∫–∏: >, <, >=, <=, –∏–±–æ –≤—Ä–µ–º—è ‚Äî –Ω–µ –ª–∏–Ω–µ–π–Ω–æ, –Ω–æ –ø–æ–¥–¥–∞—ë—Ç—Å—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—é

    üìú –ü—Ä–∏–º–µ—Ä—ã DSL-–∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π:
        level:ERROR AND message:"fail.*int"
        NOT module:ai/logic.py AND timestamp:>2025-04-01T00:00:00

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        - where_clause (str) ‚Äî —á–∞—Å—Ç—å SQL-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ–±—Ä—è–¥–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        - params (list) ‚Äî –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏, –¥–∞–±—ã –Ω–µ —Ç—Ä–µ–≤–æ–∂–∏—Ç—å –±–æ–≥–æ–≤ –∏–Ω—ä–µ–∫—Ü–∏—è–º–∏

    –í–Ω–∏–º–∞–Ω–∏–µ:
        - –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏. –î–µ–º–æ–Ω—ã –ø–æ–∫–∞ –±–æ—è—Ç—Å—è –≥–ª—É–±–æ–∫–æ–π —Ä–µ–∫—É—Ä—Å–∏–∏.
        - –û—à–∏–±–æ—á–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è. –¢–∞–∫–æ–≤ –Ω–∞—à –ø—É—Ç—å.
    """

    dsl_string = dsl_string.replace("&&", "AND")
    dsl_string = dsl_string.replace("||", "OR")

    tokens = re.split(r'\s+(AND|OR|NOT)\s+', dsl_string.strip())
    sql_parts = []
    params = []
    message_regex = None

    for token in tokens:
        token = token.strip()
        if token in {"AND", "OR", "NOT"}:
            sql_parts.append(token)
            continue

        match = re.match(r'(\w+):([<>]=?|=)?(.*)', token)
        if not match:
            continue

        field, op, value = match.groups()
        field = field.strip()
        op = op.strip() if op else '='
        value = value.strip().strip('"')

        if field == "timestamp":
            try:
                dt = datetime.datetime.fromisoformat(value)
                timestamp = int(dt.timestamp() * 1000)
                sql_parts.append(f"timestamp {op} ?")
                params.append(timestamp)
            except ValueError:
                continue

        elif field == "message":
            # –ú—ã –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º message –≤ SQL, –∞ –ø–µ—Ä–µ–¥–∞—ë–º –µ–≥–æ –∫–∞–∫ regex
            message_regex = value
            continue

        elif field in {"level", "module"}:
            sql_parts.append(f"{field} {op} ?")
            params.append(value)

    where_clause = " ".join(sql_parts)
    return where_clause, params, message_regex